/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("MinorDB", [], factory);
	else if(typeof exports === 'object')
		exports["MinorDB"] = factory();
	else
		root["MinorDB"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/MinorDB.ts":
/*!************************!*\
  !*** ./src/MinorDB.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MinorDB)\n/* harmony export */ });\n/* harmony import */ var _Table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Table */ \"./src/Table.ts\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/util.ts\");\n\r\n\r\n/**\r\n * MinorDB是基于IndexDB封装的一个浏览器数据库\r\n */\r\nclass MinorDB {\r\n    _name;\r\n    _version;\r\n    _isOpen = false;\r\n    request;\r\n    _idb;\r\n    upgradeFunc;\r\n    constructor(name, version) {\r\n        this._name = name;\r\n        this._version = version || 1;\r\n        return this;\r\n    }\r\n    /**\r\n     * 数据的名字.\r\n     * @type {string}\r\n     */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    /**\r\n     * 数据库的版本\r\n     * @type {number}\r\n     */\r\n    get version() {\r\n        return this._version;\r\n    }\r\n    /**\r\n     * 是否打开\r\n     */\r\n    get isOpen() {\r\n        return this._isOpen;\r\n    }\r\n    /**\r\n     * 监听的onupgradeneeded的触发函数\r\n     * @param {Function} cb  onupgradeneeded 回调\r\n     */\r\n    onupgradeneeded(cb) {\r\n        this.upgradeFunc = cb;\r\n    }\r\n    /**\r\n     * 创建并打开数据库，如果已经创建过了，即直接打开\r\n     * @param {Object}\r\n     * @returns Promise\r\n     */\r\n    open(schemas) {\r\n        this.close();\r\n        this._stores(schemas);\r\n        return new Promise((resolve, reject) => {\r\n            this.request = _util__WEBPACK_IMPORTED_MODULE_1__.indexedDB.open(this._name, this._version);\r\n            this.request.onupgradeneeded = (event) => {\r\n                this._idb = event.target.result;\r\n                this._addStores(schemas);\r\n                this.upgradeFunc && this.upgradeFunc(event);\r\n            };\r\n            this.request.onsuccess = (event) => {\r\n                this._idb = event.target.result;\r\n                this._isOpen = true;\r\n                resolve(event);\r\n            };\r\n            this.request.onerror = (event) => reject((0,_util__WEBPACK_IMPORTED_MODULE_1__.getIDBError)(event));\r\n        });\r\n    }\r\n    _addStores(schemas) {\r\n        for (const tbName of Object.keys(schemas)) {\r\n            if (!this._idb.objectStoreNames.contains(tbName)) {\r\n                this[tbName].create(schemas[tbName]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 根据schemas创建table\r\n     * @param {Object} schemas table的配置文件\r\n     * @returns MinorDB\r\n     */\r\n    _stores(schemas) {\r\n        if (!(0,_util__WEBPACK_IMPORTED_MODULE_1__.isObject)(schemas)) {\r\n            throw new Error(\"schemas required an  Object\");\r\n        }\r\n        for (const tbName of Object.keys(schemas)) {\r\n            if (this[tbName])\r\n                break;\r\n            this[tbName] = new _Table__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this, tbName);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 获取所有的table名字\r\n     * @returns Array\r\n     */\r\n    getTableNames() {\r\n        return this._idb && this._idb.objectStoreNames;\r\n    }\r\n    /**\r\n     * 关闭数据库\r\n     */\r\n    close() {\r\n        if (this._isOpen) {\r\n            this._idb?.close();\r\n            this._isOpen = false;\r\n            this._idb = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * 销毁数据库\r\n     */\r\n    drop() {\r\n        this.close();\r\n        return new Promise((resolve, reject) => {\r\n            const req = _util__WEBPACK_IMPORTED_MODULE_1__.indexedDB.deleteDatabase(this._name);\r\n            req.onsuccess = (e) => resolve(e);\r\n            req.onerror = (e) => reject(e);\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://MinorDB/./src/MinorDB.ts?");

/***/ }),

/***/ "./src/Table.ts":
/*!**********************!*\
  !*** ./src/Table.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Table)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"./src/util.ts\");\n/* harmony import */ var _WhereCause__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./WhereCause */ \"./src/WhereCause.ts\");\n\r\n\r\n/**\r\n * Table类\r\n * 负责表的增加，删除，修改\r\n */\r\nclass Table {\r\n    minorDb;\r\n    _name;\r\n    _pkey = '';\r\n    where;\r\n    limit;\r\n    sort;\r\n    constructor(minorDb, name) {\r\n        this.minorDb = minorDb;\r\n        this._name = name;\r\n        this.where = (arg) => new _WhereCause__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this).where(arg);\r\n        this.limit = (arg) => new _WhereCause__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this).limit(arg);\r\n        this.sort = (arg) => new _WhereCause__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this).sort(arg);\r\n    }\r\n    get idb() {\r\n        return this.minorDb._idb;\r\n    }\r\n    /**\r\n    * 根据schema配置信息创建table\r\n    * @param {String} schema 数据库字段\r\n    */\r\n    create(schema) {\r\n        const fields = schema.split(',');\r\n        /**\r\n         * 取fields第一个为主键\r\n         * ++代表主键自增\r\n         */\r\n        const _pkey = fields[0].trim();\r\n        const autoIncrement = _pkey.startsWith(\"++\");\r\n        this._pkey = autoIncrement ? _pkey.slice(2) : _pkey;\r\n        const opition = { keyPath: this._pkey, autoIncrement };\r\n        const _table = this.idb.createObjectStore(this._name, opition);\r\n        /**\r\n         * 遍历字段的schema配置信息，创建索引\r\n         * &代表unique不可重复索引\r\n         */\r\n        if (fields.length <= 1)\r\n            return;\r\n        for (let i = 1; i < fields.length; i++) {\r\n            const field = fields[i].trim();\r\n            const unique = field.startsWith(\"&\");\r\n            const _field = unique ? field.slice(1) : field;\r\n            _table.createIndex(_field, _field, { unique });\r\n        }\r\n    }\r\n    /**\r\n     * 获取store的实例\r\n     * 默认开启 transaction事物\r\n     * @param {String} rwType\r\n     * @returns objectStore\r\n     */\r\n    getStore(rwType) {\r\n        if (!this.minorDb.isOpen) {\r\n            (0,_util__WEBPACK_IMPORTED_MODULE_0__.logError)('the indexdb is not open');\r\n        }\r\n        return this.idb?.transaction([this._name], rwType).objectStore(this._name);\r\n    }\r\n    // _bind() {\r\n    //     ['where', 'limit', 'sort'].forEach(func => {\r\n    //         this[func] = (...arg) => new WhereCause(this)[func](...arg);\r\n    //     });\r\n    // }\r\n    /**\r\n     * 插入数据，可以一条或多条\r\n     * @param {string} storeName:表名称\r\n     * @param {object|array} content:需要写入的内容\r\n     */\r\n    insert(rows) {\r\n        if (!(0,_util__WEBPACK_IMPORTED_MODULE_0__.isObject)(rows))\r\n            (0,_util__WEBPACK_IMPORTED_MODULE_0__.logError)('content must be is an object or array ');\r\n        const store = this.getStore(\"readwrite\");\r\n        //如果是数组\r\n        if (Array.isArray(rows)) {\r\n            return Promise.all(rows.map((row) => {\r\n                return this.insertOne(row, store);\r\n            }));\r\n        }\r\n        else {\r\n            return this.insertOne(rows, store);\r\n        }\r\n    }\r\n    /**\r\n     * 插入一条数据\r\n     * @param {string} storeName:表名称\r\n     * @param {object|array} content:需要写入的内容\r\n     */\r\n    insertOne(row, store) {\r\n        if (!(0,_util__WEBPACK_IMPORTED_MODULE_0__.isObject)(row) || Array.isArray(row))\r\n            (0,_util__WEBPACK_IMPORTED_MODULE_0__.logError)('content must be is an object');\r\n        return new Promise((resolve, reject) => {\r\n            if (!store) {\r\n                store = this.getStore(\"readwrite\");\r\n            }\r\n            const iRequest = store.add(row);\r\n            iRequest.onsuccess = () => {\r\n                resolve(iRequest.result);\r\n            };\r\n            iRequest.onerror = (event) => reject((0,_util__WEBPACK_IMPORTED_MODULE_0__.getIDBError)(event));\r\n        });\r\n    }\r\n    /**\r\n     * 更新数据\r\n     * @param {string} storeName:表名称\r\n     * @param {object/array} content:需要写入的内容\r\n     */\r\n    update(doc) {\r\n        if (!(0,_util__WEBPACK_IMPORTED_MODULE_0__.isObject)(doc) || Array.isArray(doc))\r\n            (0,_util__WEBPACK_IMPORTED_MODULE_0__.logError)('content must be is an object');\r\n        return new Promise((resolve, reject) => {\r\n            const store = this.getStore(\"readwrite\");\r\n            if (!doc[store.keyPath])\r\n                reject('content must have a primary key');\r\n            const uRequest = store.put(doc);\r\n            uRequest.onsuccess = () => resolve(uRequest.result);\r\n            uRequest.onerror = (event) => reject((0,_util__WEBPACK_IMPORTED_MODULE_0__.getIDBError)(event));\r\n        });\r\n    }\r\n    /**\r\n     * 查询数据\r\n     * @param {Object} whereCause  需要查询的条件\r\n     * @param {Object} fields 需要查询的字段信息\r\n     */\r\n    find(whereCause = {}) {\r\n        const { field, count, keyRange, orderBy } = whereCause;\r\n        return new Promise((resolve, reject) => {\r\n            const store = this.getStore(\"readonly\");\r\n            const list = [];\r\n            let qRequest;\r\n            if (!field || store.keyPath === field) {\r\n                //主键查询\r\n                qRequest = store.openCursor(keyRange, orderBy);\r\n            }\r\n            else {\r\n                //索引\r\n                qRequest = store.index(field).openCursor(keyRange, orderBy);\r\n            }\r\n            qRequest.onsuccess = (event) => {\r\n                const cursor = event.target.result;\r\n                if (cursor) {\r\n                    list.push(cursor.value);\r\n                    if (count && list.length >= count) {\r\n                        resolve(list);\r\n                        return;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    resolve(list);\r\n                }\r\n            };\r\n            qRequest.onerror = (event) => reject((0,_util__WEBPACK_IMPORTED_MODULE_0__.getIDBError)(event));\r\n        });\r\n    }\r\n    /**\r\n     * 删除数据\r\n     * @param {string} storeName:表名称\r\n     * @param {object/array} content:需要写入的内容\r\n     */\r\n    remove(whereCause = {}) {\r\n        if (!(0,_util__WEBPACK_IMPORTED_MODULE_0__.isObject)(whereCause) || Array.isArray(whereCause))\r\n            (0,_util__WEBPACK_IMPORTED_MODULE_0__.logError)('whereCause must be an object ');\r\n        const { field, count, keyRange, orderBy } = whereCause;\r\n        return new Promise((resolve, reject) => {\r\n            const store = this.getStore(\"readwrite\");\r\n            let dRequest;\r\n            if (!field || store.keyPath === field) {\r\n                //主键查询\r\n                dRequest = store.openCursor(keyRange, orderBy);\r\n            }\r\n            else {\r\n                //索引\r\n                dRequest = store.index(field).openCursor(keyRange, orderBy);\r\n            }\r\n            const list = [];\r\n            dRequest.onsuccess = (event) => {\r\n                const cursor = event.target.result;\r\n                if (cursor) {\r\n                    list.push(cursor.value);\r\n                    cursor.delete();\r\n                    if (count && list.length >= count) {\r\n                        resolve(list);\r\n                        return;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    resolve(list);\r\n                }\r\n            };\r\n            dRequest.onerror = (event) => reject((0,_util__WEBPACK_IMPORTED_MODULE_0__.getIDBError)(event));\r\n        });\r\n    }\r\n    /**\r\n     * 清空数据表数据\r\n     */\r\n    clear() {\r\n        return new Promise((resolve, reject) => {\r\n            const cRequest = this.getStore(\"readwrite\").clear();\r\n            cRequest.onsuccess = () => resolve(cRequest.result);\r\n            cRequest.onerror = (event) => reject((0,_util__WEBPACK_IMPORTED_MODULE_0__.getIDBError)(event));\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://MinorDB/./src/Table.ts?");

/***/ }),

/***/ "./src/WhereCause.ts":
/*!***************************!*\
  !*** ./src/WhereCause.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WhereCause)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"./src/util.ts\");\n\r\n//{ id: { '<=': 2,'>=':1} }\r\nconst RangFuncMap = {\r\n    '<': 'upperBound',\r\n    '>': 'lowerBound',\r\n};\r\nconst OrderByMap = {\r\n    'ASC': 'next',\r\n    'DESC': 'prev',\r\n};\r\nclass WhereCause {\r\n    _table;\r\n    whereCause;\r\n    find;\r\n    remove;\r\n    constructor(table) {\r\n        this._table = table;\r\n        this.whereCause = { orderBy: 'next' };\r\n        this.find = () => this._table.find(this.whereCause);\r\n        this.remove = () => this._table.remove(this.whereCause);\r\n    }\r\n    where(expr) {\r\n        if (!(0,_util__WEBPACK_IMPORTED_MODULE_0__.isObject)(expr))\r\n            return this;\r\n        const fields = Object.keys(expr);\r\n        if (fields.length === 1) {\r\n            let field = fields[0];\r\n            this.whereCause.field = field;\r\n            const whereCause = expr[field];\r\n            const wherekeys = Object.keys(whereCause);\r\n            if (wherekeys.length === 1) {\r\n                let key = wherekeys[0];\r\n                if (key === '=') {\r\n                    this.whereCause.keyRange = _util__WEBPACK_IMPORTED_MODULE_0__.IDBKeyRange.only(whereCause[key]);\r\n                    return this;\r\n                }\r\n                const isNotEq = !key.endsWith('=');\r\n                const rangkey = isNotEq ? key : key.slice(0, 1);\r\n                this.whereCause.keyRange = _util__WEBPACK_IMPORTED_MODULE_0__.IDBKeyRange[RangFuncMap[rangkey]](whereCause[key], isNotEq);\r\n            }\r\n            else {\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    sort(sortType = 'ASC') {\r\n        const orderBy = OrderByMap[sortType.toUpperCase()];\r\n        if (!orderBy)\r\n            (0,_util__WEBPACK_IMPORTED_MODULE_0__.logError)('The value of param must be DESC or ASC');\r\n        this.whereCause.orderBy = orderBy;\r\n        return this;\r\n    }\r\n    limit(num) {\r\n        if (!Number.isInteger(num))\r\n            (0,_util__WEBPACK_IMPORTED_MODULE_0__.logError)('param type must be an int');\r\n        this.whereCause.count = num;\r\n        return this;\r\n    }\r\n    /**\r\n     * 更新数据\r\n     * @param {object/array} content:需要写入的内容\r\n     */\r\n    update(updateDate) {\r\n        const { field, count, keyRange, orderBy } = this.whereCause;\r\n        return new Promise((resolve, reject) => {\r\n            const store = this._table.getStore(\"readwrite\");\r\n            let uRequest;\r\n            let _pkey = store.keyPath;\r\n            if (!field || _pkey === field) {\r\n                //主键查询\r\n                uRequest = store.openCursor(keyRange, orderBy);\r\n            }\r\n            else {\r\n                //索引\r\n                uRequest = store.index(field).openCursor(keyRange, orderBy);\r\n            }\r\n            const list = [];\r\n            uRequest.onsuccess = (event) => {\r\n                const cursor = event.target.result;\r\n                if (cursor) {\r\n                    updateDate[_pkey] = cursor.primaryKey;\r\n                    cursor.update(updateDate);\r\n                    list.push(cursor.primaryKey);\r\n                    if (count && list.length >= count) {\r\n                        resolve(list);\r\n                        return;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    resolve(list);\r\n                }\r\n            };\r\n            uRequest.onerror = (event) => reject((0,_util__WEBPACK_IMPORTED_MODULE_0__.getIDBError)(event));\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://MinorDB/./src/WhereCause.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _MinorDB__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MinorDB */ \"./src/MinorDB.ts\");\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_MinorDB__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\r\n\n\n//# sourceURL=webpack://MinorDB/./src/index.ts?");

/***/ }),

/***/ "./src/util.ts":
/*!*********************!*\
  !*** ./src/util.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isObject\": () => (/* binding */ isObject),\n/* harmony export */   \"getIDBError\": () => (/* binding */ getIDBError),\n/* harmony export */   \"logError\": () => (/* binding */ logError),\n/* harmony export */   \"indexedDB\": () => (/* binding */ indexedDB),\n/* harmony export */   \"IDBKeyRange\": () => (/* binding */ IDBKeyRange)\n/* harmony export */ });\nconst isObject = (obj) => {\r\n    return typeof obj === \"object\" && obj !== null;\r\n};\r\nconst getIDBError = (e) => e.target.error;\r\nconst logError = (e) => {\r\n    throw new Error(e);\r\n};\r\n//@ts-ignore\r\nconst indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n//@ts-ignore\r\nconst IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\r\n\n\n//# sourceURL=webpack://MinorDB/./src/util.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	__webpack_exports__ = __webpack_exports__["default"];
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});